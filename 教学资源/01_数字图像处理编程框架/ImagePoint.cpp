// ImagePoint.cpp: implementation of the CImagePoint class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "ImagePoint.h"

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

// [ ******** ] ..........................................................
// [ 构造函数 ] ..........................................................
// [ ******** ] ..........................................................
CImagePoint::CImagePoint()
{
	m_row    = 0; // [ 行坐标 ]
	m_column = 0; // [ 列坐标 ]
}

// [ ************** ] ....................................................
// [ 初始化构造函数 ] ....................................................
// [ ************** ] ....................................................
CImagePoint::CImagePoint( long row, long column )
{
	m_row    = row;    // [ 行坐标 ]
	m_column = column; // [ 列坐标 ]
}

// [ ******** ] ..........................................................
// [ 析构函数 ] ..........................................................
// [ ******** ] ..........................................................
CImagePoint::~CImagePoint()
{

}

// [ ******** ] ..........................................................
// [ 等号重载 ] ..........................................................
// [ ******** ] ..........................................................
bool CImagePoint::operator==( CImagePoint point ) const
{
	return m_row    == point.m_row      // [ 行坐标 ]
		&& m_column == point.m_column ; // [ 列坐标 ]
}

// [ ********** ] ........................................................
// [ 不等号重载 ] ........................................................
// [ ********** ] ........................................................
bool CImagePoint::operator!=( CImagePoint point ) const
{
	return m_row    != point.m_row     // [ 行坐标 ]
		|| m_column != point.m_column; // [ 列坐标 ]
}

// [ ******** ] ..........................................................
// [ 加号重载 ] ..........................................................
// [ ******** ] ..........................................................
CImagePoint CImagePoint::operator+( CImagePoint point ) const
{
	CImagePoint temp;                          // [ 临时点坐标 ]

	temp.m_row    = m_row    + point.m_row;    // [ 行坐标 ]
	temp.m_column = m_column + point.m_column; // [ 列坐标 ]

	return temp;                               // [ 返回临时点坐标 ]
}

// [ ******** ] ..........................................................
// [ 减号重载 ] ..........................................................
// [ ******** ] ..........................................................
CImagePoint CImagePoint::operator-( CImagePoint point ) const
{
	CImagePoint temp;                          // [ 临时点坐标 ]

	temp.m_row    = m_row    - point.m_row;    // [ 行坐标 ]
	temp.m_column = m_column - point.m_column; // [ 列坐标 ]

	return temp;                               // [ 返回临时点坐标 ]
}

// [ ************ ] ......................................................
// [ 加等于号重载 ] ......................................................
// [ ************ ] ......................................................
void CImagePoint::operator+=( CImagePoint point )
{
	m_row    += point.m_row;    // [ 行坐标 ]
	m_column += point.m_column; // [ 列坐标 ]
}

// [ ************ ] ......................................................
// [ 减等于号重载 ] ......................................................
// [ ************ ] ......................................................
void CImagePoint::operator-=( CImagePoint point )
{
	m_row    -= point.m_row;    // [ 行坐标 ]
	m_column -= point.m_column; // [ 列坐标 ]
}

// [ ********************************************** ] ....................
// [ 判断点坐标是否在矩形内( 包括在矩形的四条边上 ) ] ....................
// [ ********************************************** ] ....................
bool CImagePoint::Is_in_rectangle( RECT rect ) const
{
	return    m_row    >= rect.top  && m_row    <= rect.bottom  // [ 行坐标 ]
		   && m_column >= rect.left && m_column <= rect.right ; // [ 列坐标 ]
}